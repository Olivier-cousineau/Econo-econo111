name: Organize incoming -> data/<store>/<city>.json + previews (21:00 Québec)

on:
  schedule:
    - cron: "0 1 * * *"   # 21:00 (Québec) l'été (EDT)
    - cron: "0 2 * * *"   # 21:00 (Québec) l'hiver (EST)
  workflow_dispatch:       # bouton "Run workflow" dans l'onglet Actions

permissions:
  contents: write

jobs:
  organize:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Organize files
        shell: bash
        run: |
          python - << 'PY'
          import os, re, json, html, shutil

          # === Config de base (ajoute des magasins/villes si besoin) ===
          STORES = {
              "walmart": "Walmart",
              "home-depot": "Home Depot",
              "canadian-tire": "Canadian Tire",
              "rona": "Rona",
              "patrick-morin": "Patrick Morin",
              "sporting-life": "Sporting Life",
          }
          CITY_LABELS = {
              "montreal": "Montréal",
              "laval": "Laval",
              "saint-jerome": "Saint-Jérôme",
              "quebec": "Québec",
          }
          CITY_ALIASES = {
              "montreal": "montreal",
              "mtl": "montreal",
              "ile-de-montreal": "montreal",
              "ile-montreal": "montreal",
              "laval": "laval",
              "saint-jerome": "saint-jerome",
              "st-jerome": "saint-jerome",
              "stjerome": "saint-jerome",
              "st-jerôme": "saint-jerome",
              "quebec": "quebec",
              "quebec-city": "quebec",
              "ville-de-quebec": "quebec",
              "ville-quebec": "quebec",
              "ville-de-quebec-city": "quebec",
          }

          def slugify(s: str) -> str:
              s = s.lower()
              s = (s.replace("é","e").replace("è","e").replace("ê","e")
                     .replace("à","a").replace("î","i").replace("ï","i")
                     .replace("ô","o").replace("ç","c"))
              s = re.sub(r"[^a-z0-9]+","-", s).strip("-")
              return s

          def ensure(p): os.makedirs(p, exist_ok=True)

          def as_price(v):
              if isinstance(v, (int, float)): return float(v)
              if not v: return None
              s = str(v).replace("\xa0"," ")
              m = re.search(r"([0-9]+(?:[.,][0-9]{1,2})?)", s)
              return float(m.group(1).replace(",", ".")) if m else None

          def write_preview(items, store_label, city_label, path):
              def money(x): 
                  return f"{x:,.2f}".replace(",", " ").replace(".", ",") + " $"
              cards=[]
              for d in items:
                  pct = round((1 - (d["salePrice"]/d["price"])) * 100) if d["price"] else 0
                  cards.append(f'''
                  <article class="card" style="background:linear-gradient(180deg,#111827,#0b1220);border:1px solid #2b3446;border-radius:14px;overflow:hidden">
                    <img src="{html.escape(d.get('image',''))}" alt="{html.escape(d['title'])}" loading="lazy" style="width:100%;height:160px;object-fit:cover;background:#0b0b10"/>
                    <div class="body" style="padding:14px">
                      <div class="badge" style="display:inline-flex;gap:6px;align-items:center;background:rgba(34,197,94,.12);border:1px solid rgba(34,197,94,.35);color:#86efac;border-radius:999px;padding:6px 10px;font-weight:600;font-size:12px">-{pct}% <span class="label">Rabais</span></div>
                      <h3 style="margin:8px 0 6px;font-size:16px">{html.escape(d['title'])}</h3>
                      <div class="muted" style="font-size:13px;color:#9ca3af">{html.escape(store_label)} · {html.escape(city_label)}</div>
                      <div class="price" style="display:flex;gap:10px;align-items:baseline;margin:8px 0">
                        <div class="old" style="text-decoration:line-through;color:#9ca3af">{money(d['price'])}</div>
                        <div style="font-weight:800">{money(d['salePrice'])}</div>
                      </div>
                      <a class="btn" href="{html.escape(d.get('url',''))}" target="_blank" rel="noopener" style="display:inline-flex;justify-content:center;align-items:center;padding:10px 14px;border:1px solid #2b3446;border-radius:12px;color:#e5e7eb;text-decoration:none;width:100%">Voir</a>
                    </div>
                  </article>
                  ''')
              html_doc=f'''<!doctype html>
              <meta charset="utf-8">
              <title>{store_label} — {city_label}</title>
              <body style="font-family:system-ui,Segoe UI,Roboto,Arial,sans-serif;background:#0f172a;color:#e5e7eb;margin:0;padding:24px">
              <h1 style="font-size:22px;margin:0 0 16px">{store_label} — {city_label} ({len(items)} articles)</h1>
              <div style="display:grid;grid-template-columns:repeat(auto-fill,minmax(260px,1fr));gap:16px">{''.join(cards)}</div>
              </body>'''
              with open(path, "w", encoding="utf-8") as f:
                  f.write(html_doc)

          # Dossiers
          ensure("incoming"); ensure("data"); ensure("previews"); ensure("archive")
          changed=False

          for fname in sorted(os.listdir("incoming")):
              src=os.path.join("incoming", fname)
              if not os.path.isfile(src):
                  continue
              if fname.startswith('.'):
                  continue
              base, ext = os.path.splitext(fname); ext=ext.lower()

              # Déduire magasin et ville depuis le nom de fichier (ex: walmart_saint-jerome.json)
              tokens = re.split(r"[^A-Za-z0-9éèêàîïôçÉÈÊÀÎÏÔÇ]+", base)
              toks=[t for t in tokens if t]
              if len(toks) < 2:
                  print("Skip (cannot parse):", fname); 
                  continue

              store_token = slugify(toks[0])
              city_parts = []
              for t in toks[1:]:
                  slug = slugify(t)
                  if slug:
                      city_parts.append(slug)

              store_slug = store_token
              store_label = STORES.get(store_slug)
              if not store_label and store_slug in ("walmartca","walmart-canada","walmartcom"):
                  store_slug, store_label = "walmart", "Walmart"
              if not store_label:
                  store_label = store_slug.replace("-", " ").title()

              city_slug = None
              if city_parts:
                  # Remove tokens that are pure numbers or map markers (ex: "2100", "8")
                  filtered = [p for p in city_parts if not p.isdigit()]
                  parts_for_matching = filtered or city_parts

                  # Try to match the longest sequence of tokens against known aliases
                  for size in range(len(parts_for_matching), 0, -1):
                      matched = False
                      for start in range(0, len(parts_for_matching) - size + 1):
                          candidate = "-".join(parts_for_matching[start:start + size])
                          canonical = CITY_ALIASES.get(candidate)
                          if canonical:
                              city_slug = canonical
                              matched = True
                              break
                      if matched:
                          break

                  if not city_slug:
                      city_slug = "-".join(filtered) if filtered else "-".join(city_parts)

              if not city_slug:
                  print("Skip (cannot determine city):", fname)
                  continue

              city_label = CITY_LABELS.get(city_slug) or city_slug.replace("-", " ").title()

              data_dir=os.path.join("data", store_slug); ensure(data_dir)
              prev_dir=os.path.join("previews", store_slug); ensure(prev_dir)

              if ext == ".json":
                  items=[]
                  try:
                      data=json.load(open(src,"r",encoding="utf-8"))
                      for row in data:
                          title=(row.get("title") or row.get("name") or row.get("w_q67L") or "").strip()
                          image=row.get("image") or row.get("img") or row.get("absolute src") or ""
                          url  =row.get("url") or row.get("href") or row.get("w-100 href") or ""
                          price=as_price(row.get("price")) or as_price(row.get("strike")) or as_price(row.get("regularPrice"))
                          sale =as_price(row.get("salePrice")) or as_price(row.get("current")) or as_price(row.get("mr1"))
                          if price is None and sale is not None: price=sale
                          if sale  is None and price is not None: sale=price
                          if title and price and sale:
                              items.append({"title":title,"image":image,"price":round(price,2),"salePrice":round(sale,2),"store":store_label,"city":city_label,"url":url})
                  except Exception as e:
                      print("Parse error", fname, e); 
                      continue

                  if items:
                      out_json=os.path.join(data_dir, f"{city_slug}.json")
                      with open(out_json,"w",encoding="utf-8") as f: 
                          json.dump(items, f, ensure_ascii=False, indent=2)
                      write_preview(items, store_label, city_label, os.path.join(prev_dir, f"{city_slug}.html"))
                      changed=True

                  # Archive le brut importé
                  ensure("archive")
                  shutil.move(src, os.path.join("archive", fname)); 
                  changed=True

              elif ext == ".html":
                  # Range directement l'HTML comme preview (remplace l'ancien)
                  out_html=os.path.join(prev_dir, f"{city_slug}.html")
                  shutil.move(src, out_html); 
                  changed=True

              else:
                  print("Skip (ext not supported):", fname)

          if changed:
              os.system('git config user.name "econodeal-bot"')
              os.system('git config user.email "bot@users.noreply.github.com"')
              os.system('git add data previews archive incoming || true')
              os.system('git commit -m "chore: nightly organize by store/city" || true')
              os.system('git push || true')
          else:
              print("No changes.")
          PY
