name: Manual Sporting Life Scraper

on:
  workflow_dispatch:
    inputs:
      url:
        description: "URL de la page liquidation à scruter"
        required: true
        default: "https://www.sportinglife.ca/fr-CA/liquidation/"
      max_retries:
        description: "Nombre maximal de tentatives Playwright"
        required: false
        default: "3"
      retry_delay:
        description: "Délai entre les tentatives (secondes)"
        required: false
        default: "5"
      page_timeout:
        description: "Timeout de chargement de page (ms)"
        required: false
        default: "60000"
      wait_timeout:
        description: "Timeout des éléments (ms)"
        required: false
        default: "30000"
      headless:
        description: "Exécuter Playwright en mode headless (true/false)"
        required: false
        default: "true"
      log_level:
        description: "Niveau de log du scraper"
        required: false
        default: "INFO"
      dry_run:
        description: "Ne pas envoyer vers l'API EconoDeal (true/false)"
        required: false
        default: "true"
      api_url:
        description: "URL de l'API EconoDeal pour l'import"
        required: false
        default: "https://www.econodeal.ca/api/import_liquidation"
      json_path:
        description: "Chemin de sortie JSON"
        required: false
        default: "output/liquidations_sportinglife.json"
      log_path:
        description: "Chemin du fichier log"
        required: false
        default: "output/sportinglife_scraper.log"

permissions:
  contents: read

jobs:
  debug-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Show inputs
        run: |
          echo "url=${{ github.event.inputs.url }}"
          echo "max_retries=${{ github.event.inputs.max_retries }}"
          echo "headless=${{ github.event.inputs.headless }}"

  run-scraper:
    needs: debug-inputs
    name: Exécuter le scraper Sporting Life
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright browsers
        run: python -m playwright install chromium

      - id: run-scraper
        name: Run Sporting Life scraper
        env:
          SPORTINGLIFE_API_TOKEN: ${{ secrets.SPORTINGLIFE_API_TOKEN }}
        run: |
          set -euo pipefail
          DEFAULT_JSON_PATH="output/liquidations_sportinglife.json"
          JSON_PATH="${{ github.event.inputs.json_path }}"
          if [ -z "$JSON_PATH" ]; then
            JSON_PATH="$DEFAULT_JSON_PATH"
          fi

          DEFAULT_LOG_PATH="output/sportinglife_scraper.log"
          LOG_PATH="${{ github.event.inputs.log_path }}"
          if [ -z "$LOG_PATH" ]; then
            LOG_PATH="$DEFAULT_LOG_PATH"
          fi
          mkdir -p "$(dirname "$JSON_PATH")"
          mkdir -p "$(dirname "$LOG_PATH")"
          echo "json_path=$JSON_PATH" >>"$GITHUB_OUTPUT"
          echo "log_path=$LOG_PATH" >>"$GITHUB_OUTPUT"
          MAX_RETRIES_INPUT="${{ github.event.inputs.max_retries }}"
          if [ -z "$MAX_RETRIES_INPUT" ]; then
            MAX_RETRIES_INPUT="3"
          fi

          RETRY_DELAY_INPUT="${{ github.event.inputs.retry_delay }}"
          if [ -z "$RETRY_DELAY_INPUT" ]; then
            RETRY_DELAY_INPUT="5"
          fi

          PAGE_TIMEOUT_INPUT="${{ github.event.inputs.page_timeout }}"
          if [ -z "$PAGE_TIMEOUT_INPUT" ]; then
            PAGE_TIMEOUT_INPUT="60000"
          fi

          WAIT_TIMEOUT_INPUT="${{ github.event.inputs.wait_timeout }}"
          if [ -z "$WAIT_TIMEOUT_INPUT" ]; then
            WAIT_TIMEOUT_INPUT="30000"
          fi
          URL_INPUT="${{ github.event.inputs.url }}"
          if [ -z "$URL_INPUT" ]; then
            URL_INPUT="https://www.sportinglife.ca/fr-CA/liquidation/"
          fi

          LOG_LEVEL_INPUT="${{ github.event.inputs.log_level }}"
          if [ -z "$LOG_LEVEL_INPUT" ]; then
            LOG_LEVEL_INPUT="INFO"
          fi

          API_URL_INPUT="${{ github.event.inputs.api_url }}"
          if [ -z "$API_URL_INPUT" ]; then
            API_URL_INPUT="https://www.econodeal.ca/api/import_liquidation"
          fi

          EXTRA_ARGS=(
            --url "$URL_INPUT"
            --max-retries "$MAX_RETRIES_INPUT"
            --retry-delay "$RETRY_DELAY_INPUT"
            --page-timeout "$PAGE_TIMEOUT_INPUT"
            --wait-timeout "$WAIT_TIMEOUT_INPUT"
            --log-level "$LOG_LEVEL_INPUT"
            --api-url "$API_URL_INPUT"
          )
          HEADLESS_INPUT="${{ github.event.inputs.headless }}"
          if [ -z "$HEADLESS_INPUT" ]; then
            HEADLESS_INPUT="true"
          fi
          if [ "$HEADLESS_INPUT" != "true" ]; then
            EXTRA_ARGS+=(--no-headless)
          fi
          DRY_RUN_INPUT="${{ github.event.inputs.dry_run }}"
          if [ -z "$DRY_RUN_INPUT" ]; then
            DRY_RUN_INPUT="true"
          fi
          if [ "$DRY_RUN_INPUT" = "true" ]; then
            EXTRA_ARGS+=(--skip-upload)
          fi
          python admin/sportinglife_liquidations.py \
            --output "$JSON_PATH" \
            --log-file "$LOG_PATH" \
            "${EXTRA_ARGS[@]}"

      - name: Upload scraper artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sportinglife-scraper-output
          path: |
            ${{ steps.run-scraper.outputs.json_path }}
            ${{ steps.run-scraper.outputs.log_path }}
          if-no-files-found: error
